{"name":"RollTable: Orientation","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Orientation","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Orientation\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/tools/navigation/compass-brass-blue-red.webp","actorIds":[],"_id":"0llqCdcRsYS6Z3b3"}
{"name":"RollTable: Research Complications","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Research Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Research Complications\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/sundries/books/book-embossed-gold-red.webp","actorIds":[],"_id":"1PjYr6CLukkZn8Y6"}
{"name":"Update tokens to Actor diff","permission":{"default":0,"X4uo406iXTm4HkVN":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"(async () => {\n  let updates = canvas.scene.data.tokens.map(t => {\n    let tactor = game.actors.entities.find(a => a._data.token.name === t.name);\n        if (tactor) {\n            return {\n                _id: t._id,\n                actorId: tactor.id\n            }\n        } else {\n            console.log(t.name);\n            return ;\n        }\n  });\n  await canvas.scene.updateEmbeddedEntity(\"Token\", updates);\n})();","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"2ehz32CpjP9p3Dgo"}
{"_id":"4pHZk6iLN4yaXPqo","name":"Journals Update ID to names","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"game.journal.forEach(entry => {\r\n  let content = entry.data.content;\r\n  let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]/g);\r\n  \r\n  // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n  if(matches == null) return;\r\n  let newcontent = content;\r\n  let uniqueMatches = matches\r\n    .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n    .forEach(str => {\r\n      let arrayData = str.slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n      // since the reference may not match directly with the game entity type, lets look that up.\r\n      //console.log(arrayData)\r\n      let entityType = getEntityType(arrayData[0]);\r\n      let packname;\r\n      if(entityType == 'packs'){\r\n       let pck =  arrayData[1].split('.');\r\n       packname = `${pck[0]}.${pck[1]}`;\r\n       arrayData[1] = pck[2];\r\n      }\r\n      let id = arrayData[1];\r\n      let name;\r\n      // with the id and our entity type, look up the name of the entry.\r\n      if(entityType == 'packs'){\r\n          let packs = game[entityType].get(packname);\r\n          let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === id);\r\n          //console.log(packs);\r\n          if(!pindex)\r\n            return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs.name} with the id of ${id}`);\r\n          name = pindex.name;\r\n      }else{\r\n          name = game[entityType].get(id)?.name;\r\n      }\r\n      //console.log(name)\r\n      if (!name) {\r\n        return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n      }\r\n\r\n      // replace the ID with the name.\r\n      console.log(`updating ${id} with ${name}`);\r\n\r\n      let regEx = new RegExp(id, 'g');\r\n      newcontent = newcontent.replace(regEx, name);\r\n      //console.log(newcontent)\r\n    }); \r\n  entry.update({ content: newcontent });\r\n});\r\n\r\nfunction getEntityType(entity) {\r\n  switch (entity) {\r\n    case 'JournalEntry': return 'journal';\r\n    case 'RollTable': return 'tables';\r\n    case 'Compendium': return 'packs';\r\n    default: return entity.toLowerCase() + 's';\r\n  }\r\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"LongRest","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"LongRest","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"if(args[0] == \"off\"){\nlet status = InnocentiReset.LongRest(args[1]);\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/sleep.svg","actorIds":[],"_id":"6D2nzOIPf3BYE3cM"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000","name":"Roll Tables","children":["oDfvsh39WahN2uHC","jQsdI2KkFFVmzEWZ","0llqCdcRsYS6Z3b3","1PjYr6CLukkZn8Y6","TMELCwxCrLiL5jsO"],"folderPath":[]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"6Wa5OZcmBwrLKOi5"}
{"name":"Actions","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"game.macros.entities.find(i => i.name === 'GMActions').execute(game.user.id,token.id,...args);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"9Bfb3gwL4l1VnEoB"}
{"name":"Update Weapons MidiMacro Tokens","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.7KWn7kV8paHkY2XC"},"cf":{"id":"temp_49cgjf7ubog","path":"Amostras","color":"#000000"}},"scope":"global","command":"let macroname = \"AutoRollTableCriticalHit\";\n\n(async () => {\n    canvas.tokens.placeables.forEach(a => {\nif(a.actor =! null){\n        a.actor.items.map(b => {\n            if (b.type === 'weapon') {\n                b.setFlag('midi-qol','onUseMacroName', macroname);\n            }\n        })\n}\n    })\nconsole.log(\"Fim - Tokens On Map\")\n})();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"AGBm90ZK7sEryn5v"}
{"name":"Visitar","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/hanging-sign.svg","tooltip":"Visitar","colour":"#80ff80","trigger":""}},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"let visitar = InnocentiVisitar.Visitar();","author":"oYLBQUHyYQcwtcvC","img":"icons/environment/settlement/house-farmland-small.webp","actorIds":[],"_id":"COhiak4qYv16uOM8"}
{"name":"EncouterScene","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//args[0] = 10;\n//args[1] = game.scenes.active.name;\nlet encounter = new InnocentiEncounters.Encounters();\nawait encounter.RegistryEncounter(args[0],args[1]);\nawait encounter.RollTable(args[1]);\nawait console.log(encounter);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"EbWiS3INHOgCLdHv"}
{"name":"Give Money","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"//Money Give/Remover\n\n(() => {\n\tlet targets = game.user.targets;\n\n\tlet targets_content = ``;\n\n\tfor (let target of targets) {\n\t\ttargets_content += `<img src=${target.data.img} width=\"50\" height=\"50\">`\n\t}\n\n\tlet dialog_content = `\n\t<div class = \"form-group\">\n\t\t<h1><img src=\"icons/commodities/currency/coins-plain-stack-gold.webp\" width=\"50px\" /> Golden Share</h1>\n\t\t<table style=\"width: 100%; text-align:center; border: 1px solid black\">\n\t\t  <tr>\n\t\t\t<thcolspan=\"2\">${targets_content}</th>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"pp\">Platnium<label></td>\n\t\t\t<td><input name=\"pp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"gp\">Gold    <label></td>\n\t\t\t<td><input name=\"gp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"ep\">Electrum<label></td>\n\t\t\t<td><input name=\"ep\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"sp\">Silver  <label></td>\n\t\t\t<td><input name=\"sp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t  <tr>\n\t\t\t<td><label for=\"cp\">Copper  <label></td>\n\t\t\t<td><input name=\"cp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"></td>\n\t\t  </tr>\n\t\t</table>\n\t</div>`;\n\n\tnew Dialog({\n\t\tcontent: dialog_content,\n\t\tbuttons:\n\t\t{\n\t\t\tOk: { icon: ``, label: `Change Money.`, callback: (html) => changeMoney(targets, html) }\n\t\t}\n\t}).render(true);\n})();\n\nasync function changeMoney(targets, html) {\n\tlet difference_money = {\n\t\tpp: parseInt(html.find('[name=pp]')[0].value),\n\t\tgp: parseInt(html.find('[name=gp]')[0].value),\n\t\tep: parseInt(html.find('[name=ep]')[0].value),\n\t\tsp: parseInt(html.find('[name=sp]')[0].value),\n\t\tcp: parseInt(html.find('[name=cp]')[0].value)\n\t}\n\n\t//divide update_money based on # of targets\n\tdifference_money = divideValue(difference_money, targets.size);\n\n\t//get rid of \"extra\" stuff, display all names in header\n\tlet actor_content = ``;\n\tfor (let target of targets) { actor_content += `${target.actor.name}, `; }\n\n\tlet table_content = ``;\n\tfor (let key in difference_money) {\n\t\tif (difference_money[key] !== 0)\n\t\t\ttable_content += `<tr><td>${key} :</td><td>${difference_money[key]}</td></tr>`\n\t}\n\n\tlet content = `\n\t<h2><img src=\"icons/commodities/currency/coins-plain-stack-gold.webp\" width=\"50px\" /> Add Money</h2>\n\t<table style \"width: 100%; text-align:center; border: 1px solid black\">\n\t\t<tr>\n\t\t  <th colspan=\"2\">Money Change :</th>\n\t\t</tr>\n\t\t<tr>\n\t\t  <th colspan=\"2\">${actor_content}</th>\n\t\t</tr>\n\t\t${table_content}\n\t</table>`;\n\n\tfor (let target of targets) {\n\t\tlet original_money = duplicate(target.actor.data.data.currency);\n\t\tlet update_money = changeValue(original_money, difference_money);\n\n\t\tawait target.actor.update({ \"data.currency\": update_money });\n\t}\n\n\tChatMessage.create({ content, speaker: ChatMessage._getSpeakerFromUser({ user: game.user }) })\n}\n\nfunction changeValue(Original, Difference) {\n\tlet Update = { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 };\n\n\tfor (let key in Original) {\n\t\tUpdate[key] = Original[key] + Difference[key];\n\t\tif (Update[key] < 0) {\n\t\t\tswitch (key) {\n\t\t\t\tcase \"cp\":\n\t\t\t\t\tif (Update[\"sp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 10;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 50;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 100;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"cp\"] += 1000;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sp\":\n\t\t\t\t\tif (Update[\"ep\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 5;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 10;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 100;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"sp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 10;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ep\":\n\t\t\t\t\tif (Update[\"gp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 2;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 20;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 4) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 5;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 49) {\n\t\t\t\t\t\tUpdate[\"ep\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 50;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"gp\":\n\t\t\t\t\tif (Update[\"pp\"] > 0) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 10;\n\t\t\t\t\t\tUpdate[\"pp\"] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 1) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 2;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 99) {\n\t\t\t\t\t\tUpdate[\"gp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 100;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pp\":\n\t\t\t\t\tif (Update[\"gp\"] > 9) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"gp\"] -= 10;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"ep\"] > 19) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"ep\"] -= 20;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"sp\"] > 99) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"sp\"] -= 100;\n\t\t\t\t\t}\n\t\t\t\t\telse if (Update[\"cp\"] > 999) {\n\t\t\t\t\t\tUpdate[\"pp\"] += 1;\n\t\t\t\t\t\tUpdate[\"cp\"] -= 1000;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`Not enough money to do that.`);\n\t\t\t\t\t}\n\t\t\t\t\tUpdate = changeValue(Update, { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0 });\n\t\t\t}\n\t\t}\n\t}\n\treturn Update;\n}\n\nfunction divideValue(Object, Value) {\n\tif (Value === 1) return Object;\n\tlet remainder = 0;\n\tlet Update = { pp: 0, gp: 0, ep: 0, sp: 0, cp: 0, remainder: 0 };\n\n\tfor (let key in Object) {\n\t\tUpdate[key] = Object[key] + remainder;\n\t\tremainder = Object[key] % Value;\n\t\tif (Update[key] > 0) Update[key] = Math.floor(Update[key] / Value);\n\t\tif (Update[key] < 0) Update[key] = Math.ceil(Update[key] / Value);\n\t\tif (remainder !== 0) {\n\t\t\tif (key === \"ep\") { remainder *= 5; }\n\t\t\telse if (key === \"gp\") { remainder *= 2; }\n\t\t\telse { remainder *= 10; }\n\t\t}\n\t}\n\tUpdate.remainder = remainder / 10;\n\treturn Update;\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/commodities/currency/coins-plain-stack-gold.webp","actorIds":[],"_id":"F0ZFMuftkoISS5Jb"}
{"name":"Update Weapons MidiMacro","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.7KWn7kV8paHkY2XC"},"cf":{"id":"temp_49cgjf7ubog","path":"Amostras","color":"#000000"}},"scope":"global","command":"let macroname = \"AutoRollTableCriticalHit\";\n\n(async () => {\n    canvas.tokens.placeables.forEach(a => {\n        a.actor.items.map(b => {\n            if (b.type === 'weapon' || (b.data.data.actionType === 'mwak' || b.data.data.actionType ==='rwak' || b.data.data.actionType ==='msak' || b.data.data.actionType ==='rsak')) {\n                b.setFlag('midi-qol','onUseMacroName', macroname);\n            }\n        })\n    })\nconsole.log(\"Fim - Tokens On Map\")\n})();\n///////\n(async () => {\n    game.actors.forEach(a => {\n        a.items.map(b => {\n            if (b.type === 'weapon' || (b.data.data.actionType === 'mwak' || b.data.data.actionType ==='rwak' || b.data.data.actionType ==='msak' || b.data.data.actionType ==='rsak')) {\n                b.setFlag('midi-qol','onUseMacroName', macroname);\n            }\n        })\n    })\nconsole.log(\"Fim - Actors on Game\")\n})();\n////\n(async () => {\n    game.items.forEach(a => {\n            if (a.type === 'weapon') {\n                a.setFlag('midi-qol','onUseMacroName', macroname);\n            }\n    })\nconsole.log(\"Fim - Items on Game\")\n})();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"F7XB1AC0AtENWrup"}
{"_id":"FuFEvNeskmgORSAt","name":"Update Cite e Bio","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Update Cite e Bio","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"const actorNames = game.actors.map(actor => actor.name).filter((value, index, self) => self.indexOf(value) === index);\nconst journalNames = game.journal.map(journal => journal.name).filter((value, index, self) => self.indexOf(value) === index);\n\nconst indexCite = {\n    Actor: actorNames,\n    JournalEntry: journalNames\n    }\n\ngame.actors.forEach(entry => {\n    //console.log(entry.entity)\n    let newcontent = entry.data.data.details.biography.value;\n    for(const [key, value] of Object.entries(indexCite)){\n        let entityType = key;\n        for (let i = 0; i < value.length; i++) {\n            if(value[i] != entry.name){\n            //let strName = escapeRegExp(value[i]);\n            let str = `(?!\\\\[)\\\\b${value[i]}\\\\b(?![\\\\w\\\\s]*[\\\\]\\\\}])`;\n            //console.log(str);\n            let regEx = new RegExp(str, 'g');\n            if(value[i] != entry.name){\n                //console.log(regEx);\n                newcontent = newcontent.replace(regEx, `@${entityType}[${value[i]}]{${value[i]}}`);\n            }else{\n               newcontent = newcontent.replace(regEx, `<strong>${value[i]}</strong>`); \n            }}\n        }\n        //console.log(newcontent);\n        entry.update({ 'data.details.biography.value': newcontent });\n    }\n    console.log(\"FIM\");\n});\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Divine Smite","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"gmexecute":true,"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_tu9ff6ho8z","path":"Players Macros#/CF_SEP/Macro GM","color":"#004040"}},"scope":"global","command":"// Called as an active effect:\n// macro.execute CUSTOM @target @item.level @itemCardId\n// requires midi-qol to work.\n// The @itemCardID allows the DamageOnlyWorkflow to put the damage roll on the item card\nif (args[0] === \"on\") {\n  let target = canvas.tokens.get(args[1])\n  let numDice = 1 + (Number(args[2]) || 1)\n  let undead = [\"undead\", \"fiend\"].some(type => (target.actor.data.data.details.type || \"\").toLowerCase().includes(type));\n  if (undead) numDice += 1;\n  let damageRoll = new Roll(`${numDice}d8`).roll();\n  new MidiQOL.DamageOnlyWorkflow(actor, token, damageRoll.total, \"radiant\", [target], damageRoll, {flavor: \"Divine Smite - Damage Roll (Radiant)\", itemCardId: args[3]})\n}","author":"oYLBQUHyYQcwtcvC","img":"systems/dnd5e/icons/spells/beam-red-2.jpg","actorIds":[],"_id":"IuIar0AlQQ5o94Nu"}
{"name":"AutoRollTableCriticalHit","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4kvkhvolN7IG3tm1"},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"if(args[0].attackRoll !== undefined && args[0].isCritical){\n    game.tables.getName(\"Acerto Crítico\").draw();\n}else if(args[0].attackRoll !== undefined && args[0].isFumble){\n    game.tables.getName(\"Erro Crítico\").draw();\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/d20-highlight.svg","actorIds":[],"_id":"JSSyGcianbTRXnWS"}
{"name":"Open Chest","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.UXJLvaOUS8ANMPkp"},"furnace":{"runAsGM":false},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"let actions = new InnocentiOpenLock.Actions('OpenLock');","author":"oYLBQUHyYQcwtcvC","img":"icons/containers/chest/chest-reinforced-box-brown.webp","actorIds":[],"_id":"LzfHkO4fiBmRRSnX"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_afekmag9dj8","name":"Players Macros","color":"#000000","folderPath":[],"children":[]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"N5GXZ48gFug4qkpC"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000","name":"Generators","children":["4pHZk6iLN4yaXPqo","v9hk8D7u2OpSMvip","XxMvH7477SWZNNcN","XxZx7sXse9V9XvBx","FuFEvNeskmgORSAt","wxEk4UlQXVd76lzI","zv2Arfe4Pyv5scY6","dAhdrUhmbHVXF5MC"],"folderPath":["temp_49cgjf7ubog"]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"NGJ3ojPK9qZbY75N"}
{"name":"Find Trap","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.4MODdS79QhACoEd9"},"furnace":{"runAsGM":false},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"let actions = new InnocentiOpenLock.Actions('FindLockTrap');","author":"oYLBQUHyYQcwtcvC","img":"icons/tools/scribal/magnifying-glass.webp","actorIds":[],"_id":"Ojqe6bAWB2s7EKX6"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_49cgjf7ubog","path":"Amostras","color":"#000000","name":"Amostras","children":["AGBm90ZK7sEryn5v","F7XB1AC0AtENWrup"],"folderPath":[]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"PPdpNHbH7SY2dc4K"}
{"name":"UpdateTempHP","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (!target) {\n  ChatMessage.create({content: `Token ${args[1]} is no longer in scene`, whisper: ChatMessage.getWhisperIDs(\"GM\")})\n  return;\n}\nlet increment = args[2];\nlet temphpMax = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.tempmax;\nlet temphp = (target.actor.data.data.attributes.hp.tempmax < increment)? increment:target.actor.data.data.attributes.hp.temp;\n\nif (args[0] === \"on\") {\n  target.actor.update({\"data.attributes.hp.tempmax\": temphpMax, \"data.attributes.hp.temp\": temphp})\nChatMessage.create({content: `Meal: ${target.name} received ${increment} HP temp`})\n} else {\n  target.actor.update({\"data.attributes.hp.tempmax\": 0, \"data.attributes.hp.temp\": 0})\nChatMessage.create({content: `Meal Expiry: ${target.name} Temp HP reduced by 0`})\n}","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Si6xl2xRI3PA1xlx"}
{"name":"Passive","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//args[0] = dificult\n//args[1] = sucess\n//args[2] = fail\n//args[3] = flags\n//console.log(token.id,game.user.id,args);\nconsole.log(args);\nlet checks = new Innocenti.PassiveCheck(game.user.id,token.id);\nchecks.Check(...args);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"SoEMy4ADEWkIrRap"}
{"name":"RollTable: Acerto Crítico","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Acerto Crítico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Acerto Crítico\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/vtt-512.png","actorIds":[],"_id":"TMELCwxCrLiL5jsO"}
{"name":"PoolCheck","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//console.log(args);\nlet pool = new Innocenti.PoolCheck(game.user.id,token.id);\npool.Check(...args);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"XdBXqWv08x7Ve4Ro"}
{"_id":"XxMvH7477SWZNNcN","name":"Fix Journals (change compendium links)","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"//TROCA OS LINKS DE COMPENDIUM PARA LINKS DO MUNDO.\r\n// COM ECXESSÃO DOS ITEMS QUE MANTÉM NO COMPENDIUM\r\nlet count = 0;\r\ngame.journal.forEach(entry => {\r\n    let content = entry.data.content;\r\n    let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]?(\\{([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ;&.\"()\\- ]+)\\})/g);\r\n\r\n    // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n    if (matches == null) return;\r\n    let newcontent = content;\r\n    \r\n    let uniqueMatches = matches\r\n        .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n        .forEach(str => {\r\n            count++;\r\n            let firstdata = str.slice(0, -1).split('{');\r\n            let pName = firstdata[1];\r\n            //console.log(firstdata);\r\n            let arrayData = firstdata[0].slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n            // since the reference may not match directly with the game entity type, lets look that up.\r\n            //console.log(arrayData, pName)\r\n            if (arrayData[0] != 'Compendium') return;\r\n            let pck = arrayData[1].split('.');\r\n            let packname = `${pck[0]}.${pck[1]}`;\r\n            //console.log(packname);\r\n            let id = pck[2];\r\n            let entityType = getEntityType(arrayData[0]);\r\n            \r\n            // with the id and our entity type, look up the name of the entry.\r\n            let packs = game[entityType].get(packname);\r\n            \r\n            if(packs == null){ return console.log(`Não Existe Um compendium com o nome: ${packname} com o item ${entry.name}`)}\r\n            let newEntity = packs.entity;\r\n            //console.log(newEntity);\r\n            if (newEntity === 'Item') return;\r\n            let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === pName);\r\n            \r\n            if (!pindex) {\r\n                //console.log(packs.index.find(element => element.name == pName), pName, newEntity, packname);\r\n                //return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs} with the id of ${id}`);\r\n            }\r\n            let name = (pindex) ? pindex.name : htmlDecode(pName);\r\n            console.log(name);\r\n\r\n            if (!name) {\r\n                return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n            }\r\n            let changeEntry = (name !== '') ? `@${packs.entity}[${name}]` : '';\r\n            //console.log(changeEntry);\r\n            let newstr = escapeRegExp(firstdata[0]);\r\n            console.log(`updating ${id} with ${name}`);\r\n            let regEx = new RegExp(newstr, 'g');\r\n            //console.log(regEx);\r\n            newcontent = newcontent.replace(regEx, changeEntry);\r\n            //console.log(newcontent);\r\n        });\r\n    entry.update({ content: newcontent });\r\n});\r\nconsole.log(count);\r\n\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\nfunction getEntityType(entity) {\r\n    switch (entity) {\r\n        case 'JournalEntry': return 'journal';\r\n        case 'RollTable': return 'tables';\r\n        case 'Compendium': return 'packs';\r\n        default: return entity.toLowerCase() + 's';\r\n    }\r\n}\r\n\r\nfunction htmlDecode(input) {\r\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n  return doc.documentElement.textContent;\r\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"XxZx7sXse9V9XvBx","name":"Fix Actors (change compendium links)","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"//TROCA OS LINKS DE COMPENDIUM PARA LINKS DO MUNDO.\r\n// COM ECXESSÃO DOS ITEMS QUE MANTÉM NO COMPENDIUM\r\ngame.actors.forEach(entry => {\r\n    let content = entry.data.data.details.biography.value;\r\n    let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]?(\\{([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ;&.\"()\\- ]+)\\})/g);\r\n\r\n    // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n    if (matches == null) return;\r\n    let newcontent = content;\r\n    let uniqueMatches = matches\r\n        .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n        .forEach(str => {\r\n            let firstdata = str.slice(0, -1).split('{');\r\n            let pName = firstdata[1];\r\n            //console.log(firstdata);\r\n            let arrayData = firstdata[0].slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n            // since the reference may not match directly with the game entity type, lets look that up.\r\n            //console.log(arrayData, pName)\r\n            if (arrayData[0] != 'Compendium') return;\r\n            let pck = arrayData[1].split('.');\r\n            let packname = `${pck[0]}.${pck[1]}`;\r\n            //console.log(packname);\r\n            let id = pck[2];\r\n            let entityType = getEntityType(arrayData[0]);\r\n            \r\n            // with the id and our entity type, look up the name of the entry.\r\n            let packs = game[entityType].get(packname);\r\n            \r\n            if(packs == null){ return console.log(`Não Existe Um compendium com o nome: ${packname} com o item ${entry.name}`)}\r\n            let newEntity = packs.entity;\r\n            //console.log(newEntity);\r\n            if (newEntity === 'Item') return;\r\n            let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === pName);\r\n            \r\n            if (!pindex) {\r\n                //console.log(packs.index.find(element => element.name == pName), pName, newEntity, packname);\r\n                //return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs} with the id of ${id}`);\r\n            }\r\n            let name = (pindex) ? pindex.name : htmlDecode(pName);\r\n            //console.log(name);\r\n\r\n            if (!name) {\r\n                return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\r\n            }\r\n            let changeEntry = (name !== '') ? `@${packs.entity}[${name}]` : '';\r\n            //console.log(changeEntry);\r\n            let newstr = escapeRegExp(firstdata[0]);\r\n            console.log(`updating ${id} with ${name}`);\r\n            let regEx = new RegExp(newstr, 'g');\r\n            //console.log(regEx);\r\n            newcontent = newcontent.replace(regEx, changeEntry);\r\n            //console.log(newcontent);\r\n        });\r\n    entry.update({ 'data.details.biography.value': newcontent });\r\n});\r\nconsole.log(\"FIM\");\r\n\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\nfunction getEntityType(entity) {\r\n    switch (entity) {\r\n        case 'JournalEntry': return 'journal';\r\n        case 'RollTable': return 'tables';\r\n        case 'Compendium': return 'packs';\r\n        default: return entity.toLowerCase() + 's';\r\n    }\r\n}\r\nfunction htmlDecode(input) {\r\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n  return doc.documentElement.textContent;\r\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"EncouterActiveScene","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_tu9ff6ho8z","path":"Players Macros#/CF_SEP/Macro GM","color":"#004040"}},"scope":"global","command":"//args[0] = 10;\n//args[1] = game.scenes.active.name;\nlet encounter = new InnocentiEncounters.Encounters();\n//await encounter.RegistryEncounter(args[0],args[1]);\nawait encounter.RollTable(args[1]);\nawait console.log(encounter);","author":"oYLBQUHyYQcwtcvC","img":"systems/dnd5e/icons/skills/yellow_20.jpg","actorIds":[],"_id":"aA73qk7MLChXhfWS"}
{"name":"OpenDoor","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//args[0] = dificult\n//args[1] = sucess\n//args[2] = fail\n//args[3] = key\n//args[4] = flags\n//console.log(token.id,game.user.id,args);\nconsole.log(args);\nlet checks = new Innocenti.OpenDoor(game.user.id,token.id);\nchecks.Check(...args);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"ceA7dyOV8nVtlsUs"}
{"_id":"dAhdrUhmbHVXF5MC","name":"Create Tables By Rarity","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Create Tables By Rarity ","colour":"#ff0000","trigger":""}},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"game.betterTables.createTableFromCompendium(\"Full Table Gemestones 1000gp\",\r\n    //\"dnd5e.items\",\r\n    \"innocenti-worlds.item-gemstones\",\r\n    { weightPredicate: predicate }\r\n);\r\n\r\nfunction predicate(entity) {\r\n    //if(entity.type != \"loot\") return 0;\r\n    //if(entity.data.data.consumableType != \"food\") return 0;\r\n    if(entity.data.data.price != 1000) return 0;\r\n/*\r\n    switch (entity.data.data.rarity) {\r\n        case \"Common\":\r\n            return 16;\r\n        case \"Uncommon\":\r\n            return 8;\r\n        case \"Rare\":\r\n            return 4;\r\n        case \"Very rare\":\r\n            return 2;\r\n        case \"Legendary\":\r\n            return 1;\r\n        default:\r\n            return 0;\r\n    }\r\n*/\r\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"RollTable: Complications","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Complications","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Complications\").draw();","author":"oYLBQUHyYQcwtcvC","img":"systems/dnd5e/icons/skills/red_28.jpg","actorIds":[],"_id":"jQsdI2KkFFVmzEWZ"}
{"name":"Checks","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//args[0] = skill\n//args[1] = dificult\n//args[2] = sucess\n//args[3] = fail\n//args[4] = flags\n//console.log(token.id,game.user.id,args);\n//console.log(args);\nlet checks = new Innocenti.Checks(game.user.id,token.id);\nchecks.Check(...args);","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jlE0y8fGPqSxa7US"}
{"name":"PoolFlags","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff"}},"scope":"global","command":"//console.log(token.id);\nlet pool = new Innocenti.PoolFlags(token.id, ...args);\npool.AddPool();\npool.RemovePool();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"mupzbHvVPcuo8Axb"}
{"name":"RollTable: Erro Crítico","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-grey.svg","tooltip":"RollTable: Erro Critico","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_njjj4vlgt8n","path":"Roll Tables","color":"#008000"}},"scope":"global","command":"game.tables.getName(\"Erro Crítico\").draw();","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/d20-black.svg","actorIds":[],"_id":"oDfvsh39WahN2uHC"}
{"name":"Time: LongRest","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"cf":{"id":"temp_tu9ff6ho8z","path":"Players Macros#/CF_SEP/Macro GM","color":"#004040"}},"scope":"global","command":"game.Gametime.advanceTime({hours: 8})","author":"oYLBQUHyYQcwtcvC","img":"systems/dnd5e/icons/skills/yellow_39.jpg","actorIds":[],"_id":"sAhF5gPGzTpBKD7c"}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_tu9ff6ho8z","path":"Players Macros#/CF_SEP/Macro GM","color":"#004040","name":"Macro GM","children":["sAhF5gPGzTpBKD7c","aA73qk7MLChXhfWS","IuIar0AlQQ5o94Nu"],"folderPath":["temp_afekmag9dj8"]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"t6lyq58iIIcSOKWE"}
{"name":"Xp Awards","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0"}},"scope":"global","command":"(function () {\n\tfunction award_xp(type, amount) {\n\t\tlet actors = game.actors.entities.filter(e => e.data.type === 'character' && e.hasPlayerOwner);\n\t\tlet isShared = type == \"shared\";\n\t\tconsole.log(type + ' ' + amount);\n\t\tif (Number.isInteger(amount) && actors.length > 0) {\n\t\t\tlet totalAmount = isShared ? amount : amount * actors.length;\n\t\t\tlet individualAmount = isShared ? Math.floor(amount / actors.length) : amount\n\n\t\t\tlet chatContent = `\n\t\t\t<h1><img src=\"icons/commodities/treasure/crown-gold-laurel-wreath.webp\" width=\"50px\" /> XP Awards</h1>\n\t\t\t<b>${totalAmount} Experience Awarded!</b>\n\t\t\t<br>${individualAmount} added to:\n\t\t\t`;\n\n\t\t\tactors.forEach(actor => {\n\t\t\t\tchatContent += `<br>${actor.name}`;\n\t\t\t\tactor.update({\n\t\t\t\t\t\"data.details.xp.value\": actor.data.data.details.xp.value + individualAmount\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tlet chatData = {\n\t\t\t\tuser: game.user._id,\n\t\t\t\tspeaker: ChatMessage.getSpeaker(),\n\t\t\t\tcontent: chatContent,\n\t\t\t\ttype: CONST.CHAT_MESSAGE_TYPES.OTHER\n\t\t\t};\n\t\t\tChatMessage.create(chatData);\n\t\t}\n\t}\n\n\tnew Dialog({\n\t\ttitle: \"Award Party XP\",\n\t\tcontent: `\n\t <p>Select a type and an amount. Individual xp will give or take a set amount to/from each party member, whereas shared will split an amount evenly.</p>\n\t <form>\n\t  <div class=\"form-group\">\n\t   <label>Type:</label>\n\t   <select id=\"xp-type\">\n\t\t<option value=\"individual\">individual</option>\n\t\t<option value=\"shared\">shared</option>\n\t   </select>\n\t  </div>\n\t  <div class=\"form-group\">\n\t   <label>Amount</label>\n\t   <input type=\"text\" inputmode=\"numeric\" pattern=\"\\d*\" id=\"xp-amount\">\n\t  </div>\n\t </form>\n\t `,\n\t\tbuttons: {\n\t\t\tone: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: \"Confirm\",\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet type = html.find('[id=xp-type]')[0].value;\n\t\t\t\t\tlet amount = parseInt(html.find('[id=xp-amount]')[0].value);\n\t\t\t\t\taward_xp(type, amount);\n\t\t\t\t}\n\t\t\t},\n\t\t\ttwo: {\n\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\tlabel: \"Cancel\",\n\t\t\t}\n\t\t},\n\t\tdefault: \"Cancel\"\n\t}).render(true);\n})();","author":"oYLBQUHyYQcwtcvC","img":"icons/commodities/treasure/crown-gold-laurel-wreath.webp","actorIds":[],"_id":"tjryLHTIAAnbZd3N"}
{"_id":"v9hk8D7u2OpSMvip","name":"Actor Update ID to names","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":true},"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"game.journal.forEach(entry => {\n  let content = entry.data.content;\n  let matches = content.match(/@\\w*\\[([0-9A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ.\\- ]+)\\]/g);\n  \n  // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\n  if(matches == null) return;\n  let newcontent = content;\n  let uniqueMatches = matches\n    .filter((value, index, self) => self.indexOf(value) === index) //unique matches\n    .forEach(str => {\n      let arrayData = str.slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\n      // since the reference may not match directly with the game entity type, lets look that up.\n      //console.log(arrayData)\n      let entityType = getEntityType(arrayData[0]);\n      let packname;\n      if(entityType == 'packs'){\n       let pck =  arrayData[1].split('.');\n       packname = `${pck[0]}.${pck[1]}`;\n       arrayData[1] = pck[2];\n      }\n      let id = arrayData[1];\n      let name;\n      // with the id and our entity type, look up the name of the entry.\n      if(entityType == 'packs'){\n          let packs = game[entityType].get(packname);\n          let pindex = packs.index.find(element => element._id === id) || packs.index.find(element => element.name === id);\n          //console.log(packs);\n          if(!pindex)\n            return ui.notifications.error(`Could not find any record for the entity type ${entityType} in pack ${packs.name} with the id of ${id}`);\n          name = pindex.name;\n      }else{\n          name = game[entityType].get(id)?.name;\n      }\n      //console.log(name)\n      if (!name) {\n        return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${arrayData[0]}`);\n      }\n\n      // replace the ID with the name.\n      console.log(`updating ${id} with ${name}`);\n\n      let regEx = new RegExp(id, 'g');\n      newcontent = newcontent.replace(regEx, name);\n      //console.log(newcontent)\n    }); \n  entry.update({ content: newcontent });\n});\n\nfunction getEntityType(entity) {\n  switch (entity) {\n    case 'JournalEntry': return 'journal';\n    case 'RollTable': return 'tables';\n    case 'Compendium': return 'packs';\n    default: return entity.toLowerCase() + 's';\n  }\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_0l73n89jupi","path":"Automação#/CF_SEP/Automação Master","color":"#0080ff","name":"Automação Master","children":["6D2nzOIPf3BYE3cM","Si6xl2xRI3PA1xlx","9Bfb3gwL4l1VnEoB","jlE0y8fGPqSxa7US","ceA7dyOV8nVtlsUs","SoEMy4ADEWkIrRap","XdBXqWv08x7Ve4Ro","mupzbHvVPcuo8Axb","EbWiS3INHOgCLdHv"],"folderPath":["temp_3qd5z0dngmj"]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"w6KF1fJLEqJfn1FG"}
{"_id":"wxEk4UlQXVd76lzI","name":"Update Cite Journal","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Update Cite Journal","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"const actorNames = game.actors.map(actor => actor.name).filter((value, index, self) => self.indexOf(value) === index);\nconst journalNames = game.journal.map(journal => journal.name).filter((value, index, self) => self.indexOf(value) === index);\n\nconst indexCite = {\n    Actor: actorNames,\n    JournalEntry: journalNames\n    }\n\ngame.journal.forEach(entry => {\n    //console.log(entry.entity)\n    let newcontent = entry.data.content;\n    for(const [key, value] of Object.entries(indexCite)){\n        let entityType = key;\n        for (let i = 0; i < value.length; i++) {\n            let strName = value[i];\n            let str = `(?!\\\\[)\\\\b${strName}\\\\b(?![\\\\w\\\\s]*[\\\\]\\\\}])`;\n            //let str = `\\\\b${strName}(?=[^\\\\}\\\\]\\\\w])`;\n            let regEx = new RegExp(str, 'g');\n            if(value[i] != entry.name){\n                //console.log(regEx);\n                newcontent = newcontent.replace(regEx, `@${entityType}[${value[i]}]{${value[i]}}`);\n            }else{\n               newcontent = newcontent.replace(regEx, `<strong>${value[i]}</strong>`); \n            }\n        }\n        //console.log(newcontent);\n        entry.update({ content: newcontent });\n    }\n    //console.log(newcontent);\nui.notifications.info(\"Atualizou as citações nos journals\")\n    console.log(\"FIM\");\n});\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"#[CF_tempEntity]","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"chat","flags":{"cf":{"id":"temp_3qd5z0dngmj","path":"Automação","color":"#0080c0","name":"Automação","children":["COhiak4qYv16uOM8","LzfHkO4fiBmRRSnX","Ojqe6bAWB2s7EKX6","JSSyGcianbTRXnWS","tjryLHTIAAnbZd3N","F0ZFMuftkoISS5Jb"],"folderPath":[]}},"scope":"global","command":"","author":"oYLBQUHyYQcwtcvC","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"yrU0LBhqr00Wh9kl"}
{"_id":"zv2Arfe4Pyv5scY6","name":"Update tokens to Actor","permission":{"default":0,"oYLBQUHyYQcwtcvC":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"cf":{"id":"temp_12ta9h39ac1","path":"Amostras#/CF_SEP/Generators","color":"#000000"}},"scope":"global","command":"(async () => {\n  let updates = canvas.scene.data.tokens.map(t => {\n    let tactor = game.actors.entities.find(a => a.name === t.name);\n        if (tactor) {\n            return {\n                _id: t._id,\n                actorId: tactor.id\n            }\n        } else {\n            console.log(t.name);\n            return {\n                _id: t._id,\n                actorId: \"\"\n            }\n        }\n  });\n  await canvas.scene.updateEmbeddedEntity(\"Token\", updates);\n})();","author":"X4uo406iXTm4HkVN","img":"icons/svg/dice-target.svg","actorIds":[]}
